{"version":3,"sources":["index.js"],"names":["_express","_interopRequireDefault","require","_expressFileupload","_mysql","_cors","_path","app","db","mysql","createConnection","host","user","password","database","insecureAuth","use","express","json","req","res","_req$body","body","err","data","error","status","length","message","post","query","_req$body2","username","console","extraField","_req$body3","name","userType","q","tableName","checkUserQuery","concat","insertUserQuery","get","params","filename","path","join","__dirname","_req$body4","prod_name","price","type","files","image","imagePath","mv","prod_description","carID","id","values","carid","customername","title","content","reviewdate","sendFile","put","listen","log"],"mappings":"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","file":"index.min.js","sourcesContent":["import express from \"express\";\r\nimport fileUpload from \"express-fileupload\";\r\nimport mysql from \"mysql\";\r\nimport cors from \"cors\";\r\nimport path from \"path\";\r\nconst app = express();\r\nconst db = mysql.createConnection({\r\n  host: 'localhost',\r\n  user: 'root',\r\n  password: 'Nald@0627',\r\n  database: 'marketplace',\r\n  insecureAuth: true,\r\n});\r\napp.use(express.json());\r\napp.use(cors());\r\napp.use(fileUpload());\r\napp.use('/public', express.static('public'));\r\napp.get(\"/\", (req, res)=>{\r\n  res.json(\"this is the backend\")\r\n})\r\napp.post(\"/login/buyer\", (req, res) => {\r\n  const { username, password } = req.body;\r\n\r\n  const q = \"SELECT * FROM buyer WHERE username = ? AND password = ?\";\r\n  db.query(q, [username, password], (err, data) => {\r\n    if (err) {\r\n      console.error(err);\r\n      return res.status(500).json({ message: \"Internal Server Error\", error: err });\r\n    }\r\n    if (data.length > 0) {\r\n      return res.status(200).json({ message: \"Buyer login successful\" });\r\n    } else {\r\n      return res.status(401).json({ message: \"Invalid credentials for buyer\" });\r\n    }\r\n  });\r\n});\r\napp.post(\"/login/seller\", (req, res) => {\r\n  const { username, password } = req.body;\r\n\r\n  const q = \"SELECT * FROM seller WHERE username = ? AND password = ?\";\r\n  db.query(q, [username, password], (err, data) => {\r\n    if (err) {\r\n      console.error(err);\r\n      return res.status(500).json({ message: \"Internal Server Error\", error: err });\r\n    }\r\n    if (data.length > 0) {\r\n      return res.status(200).json({ message: \"Seller login successful\" });\r\n    } else {\r\n      return res.status(401).json({ message: \"Invalid credentials for seller\" });\r\n    }\r\n  });\r\n});\r\napp.post(\"/signup\", (req, res) => {\r\n  const { username, password, name, userType } = req.body;\r\n\r\n  if (!username || !password || !name) {\r\n    return res.status(400).json({ message: \"Username, password, and name are required\" });\r\n  }\r\n\r\n  let tableName, extraField;\r\n  if (userType === \"buyer\") {\r\n    tableName = \"buyer\";\r\n    extraField = \"name\";\r\n  } else if (userType === \"seller\") {\r\n    tableName = \"seller\";\r\n    extraField = \"name\";\r\n  } else {\r\n    return res.status(400).json({ message: \"Invalid user type\" });\r\n  }\r\n  const checkUserQuery = `SELECT * FROM ${tableName} WHERE username = ?`;\r\n  db.query(checkUserQuery, [username], (err, data) => {\r\n    if (err) {\r\n      console.error(err);\r\n      return res.status(500).json({ message: \"Internal Server Error\", error: err });\r\n    }\r\n    if (data.length > 0) {\r\n      return res.status(409).json({ message: \"Username already exists\" });\r\n    } else {\r\n      const insertUserQuery = `INSERT INTO ${tableName} (\\`username\\`, \\`password\\`, \\`${extraField}\\`) VALUES (?, ?, ?)`;\r\n      db.query(insertUserQuery, [username, password, name], (err, data) => {\r\n        if (err) {\r\n          console.error(err);\r\n          return res.status(500).json({ message: \"Internal Server Error\", error: err });\r\n        }\r\n        return res.status(201).json({ message: \"User registered successfully\" });\r\n      });\r\n    }\r\n  });\r\n});\r\napp.get(\"/car\", (req, res)=>{\r\n  const q= \"SELECT * FROM car\"\r\n  db.query(q,(err,data)=>{\r\n      if(err) return res.json(err)\r\n      return res.json(data)\r\n  } )\r\n})\r\napp.get(\"/upload/:filename\", (req, res) => {\r\n  const filename = req.params.filename;\r\n  res.sendFile(path.join(__dirname, 'public', 'upload', filename));\r\n});\r\napp.get(\"/review\", (req, res) => {\r\n  const q = \"SELECT * FROM review\";\r\n  \r\n  db.query(q, (err, data) => {\r\n    if (err) return res.json(err);\r\n    return res.json(data);\r\n  });\r\n});\r\napp.post(\"/car\", (req, res) => {\r\n  const { prod_name, prod_description, price, type } = req.body;\r\n  const { image } = req.files;\r\n\r\n  if (!image) {\r\n    return res.status(400).json({ message: \"No image provided\" });\r\n  }\r\n\r\n  const imagePath = `public/upload/${image.name}`;\r\n  image.mv(imagePath, (err) => {\r\n    if (err) {\r\n      console.error(err);\r\n      return res.status(500).json({ message: \"Error saving image\" });\r\n    }\r\n\r\n    const q = \"INSERT INTO car (`prod_name`, `prod_description`, `price`, `type`, `image`) VALUES (?, ?, ?, ?, ?)\";\r\n    const values = [prod_name, prod_description, price, type, imagePath];\r\n\r\n    db.query(q, values, (err, data) => {\r\n      if (err) {\r\n        console.error(err);\r\n        return res.status(500).json({ message: \"Internal Server Error\", error: err });\r\n      }\r\n      return res.status(201).json({ message: \"Car added successfully\" });\r\n    });\r\n  });\r\n});\r\napp.delete(\"/car/:id\",(req,res)=>{\r\n  const carID= req.params.id;\r\n  const q= \"DELETE FROM car WHERE id= ?\"\r\n\r\n  db.query(q, carID, (err, data) => { \r\n      if (err) {\r\n          console.error(err);\r\n          return res.status(500).json({ message: \"Internal Server Error\", error: err });\r\n      }\r\n      return res.status(201).json({ message: \"Car Deleted\" });\r\n  });\r\n\r\n})\r\napp.post(\"/review/car/:carid\", (req, res) => {\r\n  const q = \"INSERT INTO review (`carid`, `customername`, `title`, `content`, `rating`, `reviewdate`) VALUES (?, ?, ?, ?, ?, ?)\";\r\n  const values = [\r\n    req.params.carid,\r\n    req.body.customername,\r\n    req.body.title,\r\n    req.body.content,\r\n    req.body.rating,\r\n    req.body.reviewdate,\r\n  ];\r\n\r\n  db.query(q, values, (err, data) => {\r\n    if (err) {\r\n      console.error(\"Error inserting review:\", err);\r\n      return res.status(500).json({ message: \"Internal Server Error\", error: err });\r\n    }\r\n    return res.status(201).json({ message: \"Review added successfully\" });\r\n  });\r\n});\r\napp.put(\"/review/car/:carid\", (req, res) => {\r\n  const q = \"UPDATE review SET `customername`=?, `title`=?, `content`=?, `rating`=?, `reviewdate`=? WHERE reviewid=?\";\r\n  const values = [\r\n    req.body.customername,\r\n    req.body.title,\r\n    req.body.content,\r\n    req.body.rating,\r\n    req.body.reviewdate,\r\n    req.params.id,\r\n  ];\r\n\r\n  db.query(q, values, (err, data) => {\r\n    if (err) {\r\n      console.error(err);\r\n      return res.status(500).json({ message: \"Internal Server Error\", error: err });\r\n    }\r\n    return res.status(201).json({ message: \"Review updated successfully\" });\r\n  });\r\n});\r\napp.put(\"/car/:id\", (req, res) => {\r\n  const carID = req.params.id;\r\n  const { prod_name, prod_description, price, type } = req.body;\r\n  const { image } = req.files;\r\n\r\n  let imagePath;\r\n\r\n  if (image) {\r\n    // If a new image is provided, upload it and update the imagePath\r\n    imagePath = `public/upload/${image.name}`;\r\n    image.mv(imagePath, (err) => {\r\n      if (err) {\r\n        console.error(err);\r\n        return res.status(500).json({ message: \"Error saving image\" });\r\n      }\r\n    });\r\n  }\r\n\r\n  const q = `UPDATE car SET \r\n    prod_name = ?, \r\n    prod_description = ?, \r\n    ${image ? \"image = ?,\" : \"\"} \r\n    price = ?, \r\n    type = ? \r\n    WHERE id = ?`;\r\n\r\n  const values = [prod_name, prod_description, image ? imagePath : null, price, type, carID];\r\n\r\n  db.query(q, values, (err, data) => {\r\n    if (err) {\r\n      console.error(err);\r\n      return res.status(500).json({ message: \"Internal Server Error\", error: err });\r\n    }\r\n    return res.status(201).json({ message: \"Car Updated\" });\r\n  });\r\n});\r\napp.get(\"/car/:id\", (req, res) => {\r\n  const q = `SELECT * FROM car WHERE id = ?`;\r\n  const carID = req.params.id;\r\n\r\n  db.query(q, [carID], (err, data) => {\r\n    if (err) {\r\n      console.error('Error executing query:', err);\r\n      return res.status(500).json({ message: \"Internal Server Error\", error: err });\r\n    }\r\n    if (data.length > 0) {\r\n      return res.status(200).json(data[0]);\r\n    } else {\r\n      return res.status(404).json({ message: \"Car not found\" });\r\n    }\r\n  });\r\n});\r\napp.get(\"/review/car/:carid\", (req, res) => {\r\n  const carID = req.params.carid;\r\n  const q = \"SELECT * FROM review WHERE carid = ?\";\r\n\r\n  db.query(q, [carID], (err, data) => {\r\n    if (err) {\r\n      console.error(err);\r\n      return res.status(500).json({ message: \"Internal Server Error\", error: err });\r\n    }\r\n    if (data.length > 0) {\r\n      return res.status(200).json(data);\r\n    } else {\r\n      return res.status(404).json({ message: \"No reviews found for this car\" });\r\n    }\r\n  });\r\n});\r\napp.listen(8800, () => {\r\n  console.log(\"connected to backend\");\r\n});\r\n"]}